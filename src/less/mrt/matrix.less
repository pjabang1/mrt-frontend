@import (once) "import";

table.matrix.table-bordered {

  border: 0px !important;
  border-top: 0px;
}

table.matrix {
  font-family: "Helvetica Neue", sans-serif;
  font-weight: 300;
  table {
  }

  td {
    border: 0px !important;
    border-top: 0px;
    height: 100px;
    vertical-align: middle !important;
    text-align: center;
    width: 33% !important;

    .label {
      float: left;
      margin-right: 3px;
      margin-bottom: 3px;
      font-size: 120%;
    }
  }
  tr.header td, td.header {
    width: auto !important;
    height: auto !important;
    font-size: 20px;
    border: 0px;
    padding: 5px;
  }

  .label-default {
    background-color: transparent;
    cursor: pointer;
    color: #fff;
  }
  td {
    border: 0px;
    height: 200px;
  }

  @brand-danger: #DD171E;
  .rotate {
    transform: translate(0, 0) rotate(270deg);
    display: block;
  }
  .pos-3-3 {
    background-color: lighten(@brand-success, 0%);
  }
  .pos-3-2 {
    background-color: lighten(@brand-success, 25%);
  }
  .pos-2-3 {
    background-color: lighten(@brand-success, 25%);
  }
  .pos-3-1 {
    background-color: lighten(@brand-warning, 10%);
  }
  .pos-2-2 {
    background-color: lighten(@brand-warning, 0%);
  }
  .pos-1-3 {
    background-color: lighten(@brand-warning, 10%);
  }
  .pos-1-1 {
    background-color: lighten(@brand-danger, 0%);
  }
  .pos-1-2 {
    background-color: lighten(@brand-danger, 10%);
  }
  .pos-2-1 {
    background-color: lighten(@brand-danger, 10%);
  }
  /*
  We're using CSS transitions for when
  the enter and move events are triggered
  for the element that has the .repeated-item
  class
*/
  .repeated-item.ng-enter, .repeated-item.ng-move {
    -webkit-transition:0.5s linear all;
    -moz-transition:0.5s linear all;
    -o-transition:0.5s linear all;
    transition:0.5s linear all;
    opacity:0;
  }

  /*
   The ng-enter-active and ng-move-active
   are where the transition destination properties
   are set so that the animation knows what to
   animate.
  */
  .repeated-item.ng-enter.ng-enter-active,
  .repeated-item.ng-move.ng-move-active {
    opacity:1;
  }

  /*
    We're using CSS keyframe animations for when
    the leave event is triggered for the element
    that has the .repeated-item class
  */
  .repeated-item.ng-leave {
    -webkit-animation:0.5s my_animation;
    -moz-animation:0.5s my_animation;
    -o-animation:0.5s my_animation;
    animation:0.5s my_animation;
  }

  @keyframes my_animation {
    from { opacity:1; }
    to { opacity:0; }
  }

  /*
    Unfortunately each browser vendor requires
    its own definition of keyframe animation code...
  */
  @-webkit-keyframes my_animation {
    from { opacity:1; }
    to { opacity:0; }
  }

  @-moz-keyframes my_animation {
    from { opacity:1; }
    to { opacity:0; }
  }

  @-o-keyframes my_animation {
    from { opacity:1; }
    to { opacity:0; }
  }

}



/*
 We're using CSS transitions for when
 the enter and move events are triggered
 for the element that has the .repeated-item
 class
*/
.repeated-item.ng-enter, .repeated-item.ng-move {
  -webkit-transition:0.5s linear all;
  -moz-transition:0.5s linear all;
  -o-transition:0.5s linear all;
  transition:0.5s linear all;
  opacity:0;
}

/*
 The ng-enter-active and ng-move-active
 are where the transition destination properties
 are set so that the animation knows what to
 animate.
*/
.repeated-item.ng-enter.ng-enter-active,
.repeated-item.ng-move.ng-move-active {
  opacity:1;
}

/*
  We're using CSS keyframe animations for when
  the leave event is triggered for the element
  that has the .repeated-item class
*/
.repeated-item.ng-leave {
  -webkit-animation:0.5s my_animation;
  -moz-animation:0.5s my_animation;
  -o-animation:0.5s my_animation;
  animation:0.5s my_animation;
}

@keyframes my_animation {
  from { opacity:1; }
  to { opacity:0; }
}

/*
  Unfortunately each browser vendor requires
  its own definition of keyframe animation code...
*/
@-webkit-keyframes my_animation {
  from { opacity:1; }
  to { opacity:0; }
}

@-moz-keyframes my_animation {
  from { opacity:1; }
  to { opacity:0; }
}

@-o-keyframes my_animation {
  from { opacity:1; }
  to { opacity:0; }
}
