angular.module('MRT', ['app-parameters', 'ui.bootstrap', 'ui.router', 'ngCookies', 'ngTable', 'ngAnimate', 'vr.directives.slider', 'ui.select', 'ngSanitize']);
// 'ui.slider',
angular.module('app-parameters',[])  
  .constant('env', {"apiUrl":"http://10.51.130.212/mrt/web/app_dev.php/api"});
'use strict';

/**
 * Route configuration for the Dashboard module.
 */
angular.module('MRT').config(['$stateProvider', '$urlRouterProvider', 
    function($stateProvider, $urlRouterProvider) {

    // For unmatched routes
    $urlRouterProvider.otherwise('/');
	
    // Application routes
	
    $stateProvider
        .state('index', {
            url: '/',
			controller: 'AuthenticationCtrl',
            templateUrl: 'module/mrt/app/templates/index.html'
        })
		.state('dashboard', {
            url: '/dashboard',
			controller: 'DashboardCtrl',
            templateUrl: 'module/mrt/app/templates/dashboard.html'
        })
        .state('geomodel', {
            url: '/geomodel',
            controller: 'GeoModelCtrl',
            templateUrl: 'module/mrt/geomodel/templates/geomodel-index.html'
        })
		
		.state('geography', {
            url: '/geography',
            controller: 'GeographyCtrl',
            templateUrl: 'module/mrt/geography/templates/index.html'
        })
		.state('geogroup', {
            url: '/geogroup',
            controller: 'GeoGroupCtrl',
            templateUrl: 'module/mrt/geogroup/templates/index.html'
        })
		.state('geogroup-view', {
            url: '/geogroup-view/:id',
            controller: 'GeoGroupViewCtrl',
            templateUrl: 'module/mrt/geogroup/templates/view.html'
        })
		.state('geoindicator', {
            url: '/geoindicator',
            controller: 'GeoindicatorCtrl',
            templateUrl: 'module/mrt/geoindicator/templates/index.html'
        })
		.state('geomodel-cluster', {
            url: '/geomodel/cluster',
            controller: 'GeoModelCtrl',
            templateUrl: 'module/mrt/geomodel/templates/geomodel-cluster-index.html'
        })
         .state('view-fund', {
            url: '/view-fund/:phoneId',
            controller: 'ViewFundCtrl',
            templateUrl: 'tpls/mrt/tpls/tpls/view-fund.html'
        })
        .state('tables', {
            url: '/tables', 
            templateUrl: 'tables.html'
        });
}]);






/**
 * Master Controller
 */
angular.module('MRT')
    .controller('MasterCtrl', ['$scope', '$cookieStore', MasterCtrl]);

function MasterCtrl($scope, $cookieStore) {
    /**
     * Sidebar Toggle & Cookie Control
     *
     */
    
    // $scope.term = 'Hairdressers';
    
    var mobileView = 992;
	$scope.app = {};
	$scope.app.loggedIn = true;

    $scope.getWidth = function() { return window.innerWidth; };

    $scope.$watch($scope.getWidth, function(newValue, oldValue)
    {
        if(newValue >= mobileView)
        {
            if(angular.isDefined($cookieStore.get('toggle')))
            {
                if($cookieStore.get('toggle') == false)
                {
                    $scope.toggle = false;
                }            
                else
                {
                    $scope.toggle = true;
                }
            }
            else 
            {
                $scope.toggle = true;
            }
        }
        else
        {
            $scope.toggle = false;
        }

    });

    $scope.toggleSidebar = function() 
    {
        $scope.toggle = ! $scope.toggle;

        $cookieStore.put('toggle', $scope.toggle);
    };

    window.onresize = function() { $scope.$apply(); };
}


angular.module('MRT').controller('AuthenticationCtrl', ['$scope', '$location', 'geoModelService', 'geoGroupService', function($scope, $location, geoModelService, geoGroupService) {
		$scope.app.loggedIn = false;
		
		
		$scope.submit = function() {
			
			$location.path("/dashboard");
			console.log('submit');
			
		};
}]);
angular.module('MRT').directive('loginSection', searchSection);
function searchSection() {
    var directive = {
        restrict: 'AE',
        replace: true,
        templateUrl: 'module/mrt/authentication/templates/login.html'
    };
    return directive;
}
;
/**
 * 
 * 
 */
angular.module('MRT').directive('baiduExample', baiduExample);

function baiduExample($parse) {
	var directive = {
		restrict: 'AE',
		// templateUrl: 'pension/tpls/term/term-search-pageview.html',
		replace: true,
		//our data source would be an array
		//passed thru chart-data attribute
		// scope: {data: '=chartData'},
		link: function(scope, element, attrs) {
// // instantiate the chart------------------
// script plain import
			var myChart = echarts.init(element[0]);

// loading---------------------
			myChart.showLoading({
				text: "We're building the buildings as fast as we can...please wait! ", //loading text
			});

// ajax getting data...............

// ajax callback
			myChart.hideLoading();

// use the chart-------------------
			var option = {
				legend: {// legend configuration
					padding: 5, // The inner padding of the legend, in px, defaults to 5. Can be set as array - [top, right, bottom, left].
					itemGap: 10, // The pixel gap between each item in the legend. It is horizontal in a legend with horizontal layout, and vertical in a legend with vertical layout. 
					data: ['usd', 'gbp']
				},
				tooltip: {// tooltip configuration
					trigger: 'item', // trigger type. Defaults to data trigger. Can also be: 'axis'
				},
				xAxis: [// The horizontal axis in Cartesian coordinates
					{
						type: 'category', // Axis type. xAxis is category axis by default. As for value axis, please refer to the 'yAxis' chapter.
						data: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
					}
				],
				yAxis: [// The vertical axis in Cartesian coordinates
					{
						type: 'value', // Axis type. yAxis is value axis by default. As for category axis, please refer to the 'xAxis' chapter.
						boundaryGap: [0.1, 0.1], // Blank border on each side of the coordinate axis. Value in the array represents percentage. 
						splitNumber: 4                      // Applicable to value axis. The number of segments. Defaults to 5. 
					}
				],
				series: [
					{
						name: 'usd', // series name
						type: 'line', // chart type, line, scatter, bar, pie, radar
						data: [112, 23, 45, 56, 233, 343, 454, 89, 343, 123, 45, 123]
					},
					{
						name: 'gbp', // series name
						type: 'line', // chart type, line, scatter, bar, pie, radar
						data: [45, 123, 145, 526, 233, 343, 44, 829, 33, 123, 45, 13]
					}
				]
			};
			myChart.setOption(option);


// Add some data------------------
			option.legend.data.push('win');
			option.series.push({
				name: 'win', // series name
				type: 'line', // chart type, line, scatter, bar, pie, radar
				data: [112, 23, 45, 56, 233, 343, 454, 89, 343, 123, 45, 123]
			});
		}
	};
	return directive;
}
/**
 * 
 * 
 */
angular.module('MRT').directive('baiduMap', baiduMap);

function baiduMap($parse) {
	var directive = {
		restrict: 'AE',
		// templateUrl: 'pension/tpls/term/term-search-pageview.html',
		replace: true,
		//our data source would be an array
		//passed thru chart-data attribute
		// scope: {data: '=chartData'},
		link: function(scope, element, attrs) {
// // instantiate the chart------------------
// script plain import
			var myChart = echarts.init(element[0]);

// loading---------------------
			myChart.showLoading({
				text: "We're building the buildings as fast as we can...please wait! ", //loading text
			});

// ajax getting data...............

// ajax callback
			myChart.hideLoading();

// use the chart-------------------
			option = {
				title: {
					text: 'World Population (2010)',
					subtext: 'from United Nations, Total population, both sexes combined, as of 1 July (thousands)',
					sublink: 'http://esa.un.org/wpp/Excel-Data/population.htm',
					x: 'center',
					y: 'top'
				},
				tooltip: {
					trigger: 'item',
					formatter: function(params) {
						var value = (params.value + '').split('.');
						value = value[0].replace(/(\d{1,3})(?=(?:\d{3})+(?!\d))/g, '$1,')
								+ '.' + value[1];
						return params.seriesName + '<br/>' + params.name + ' : ' + value;
					}
				},
				toolbox: {
					show: true,
					orient: 'vertical',
					x: 'right',
					y: 'center',
					feature: {
						mark: {show: true},
						dataView: {show: true, readOnly: false},
						restore: {show: true},
						saveAsImage: {show: true}
					}
				},
				dataRange: {
					min: 0,
					max: 1000000,
					text: ['High', 'Low'],
					realtime: false,
					calculable: true,
					color: ['orangered', 'yellow', 'lightskyblue']
				},
				series: [
					{
						name: 'World Population (2010)',
						type: 'map',
						mapType: 'world',
						roam: true,
						mapLocation: {
							y: 60
						},
						itemStyle: {
							emphasis: {label: {show: true}}
						},
						data: [
							{name: 'Afghanistan', value: 28397.812},
							{name: 'Angola', value: 19549.124},
							{name: 'Albania', value: 3150.143},
							{name: 'United Arab Emirates', value: 8441.537},
							{name: 'Argentina', value: 40374.224},
							{name: 'Armenia', value: 2963.496},
							{name: 'French Southern and Antarctic Lands', value: 268.065},
							{name: 'Australia', value: 22404.488},
							{name: 'Austria', value: 8401.924},
							{name: 'Azerbaijan', value: 9094.718},
							{name: 'Burundi', value: 9232.753},
							{name: 'Belgium', value: 10941.288},
							{name: 'Benin', value: 9509.798},
							{name: 'Burkina Faso', value: 15540.284},
							{name: 'Bangladesh', value: 151125.475},
							{name: 'Bulgaria', value: 7389.175},
							{name: 'The Bahamas', value: 66402.316},
							{name: 'Bosnia and Herzegovina', value: 3845.929},
							{name: 'Belarus', value: 9491.07},
							{name: 'Belize', value: 308.595},
							{name: 'Bermuda', value: 64.951},
							{name: 'Bolivia', value: 716.939},
							{name: 'Brazil', value: 195210.154},
							{name: 'Brunei', value: 27.223},
							{name: 'Bhutan', value: 716.939},
							{name: 'Botswana', value: 1969.341},
							{name: 'Central African Republic', value: 4349.921},
							{name: 'Canada', value: 34126.24},
							{name: 'Switzerland', value: 7830.534},
							{name: 'Chile', value: 17150.76},
							{name: 'China', value: 1359821.465},
							{name: 'Ivory Coast', value: 60508.978},
							{name: 'Cameroon', value: 20624.343},
							{name: 'Democratic Republic of the Congo', value: 62191.161},
							{name: 'Republic of the Congo', value: 3573.024},
							{name: 'Colombia', value: 46444.798},
							{name: 'Costa Rica', value: 4669.685},
							{name: 'Cuba', value: 11281.768},
							{name: 'Northern Cyprus', value: 1.468},
							{name: 'Cyprus', value: 1103.685},
							{name: 'Czech Republic', value: 10553.701},
							{name: 'Germany', value: 83017.404},
							{name: 'Djibouti', value: 834.036},
							{name: 'Denmark', value: 5550.959},
							{name: 'Dominican Republic', value: 10016.797},
							{name: 'Algeria', value: 37062.82},
							{name: 'Ecuador', value: 15001.072},
							{name: 'Egypt', value: 78075.705},
							{name: 'Eritrea', value: 5741.159},
							{name: 'Spain', value: 46182.038},
							{name: 'Estonia', value: 1298.533},
							{name: 'Ethiopia', value: 87095.281},
							{name: 'Finland', value: 5367.693},
							{name: 'Fiji', value: 860.559},
							{name: 'Falkland Islands', value: 49.581},
							{name: 'France', value: 63230.866},
							{name: 'Gabon', value: 1556.222},
							{name: 'United Kingdom', value: 62066.35},
							{name: 'Georgia', value: 4388.674},
							{name: 'Ghana', value: 24262.901},
							{name: 'Guinea', value: 10876.033},
							{name: 'Gambia', value: 1680.64},
							{name: 'Guinea Bissau', value: 10876.033},
							{name: 'Equatorial Guinea', value: 696.167},
							{name: 'Greece', value: 11109.999},
							{name: 'Greenland', value: 56.546},
							{name: 'Guatemala', value: 14341.576},
							{name: 'French Guiana', value: 231.169},
							{name: 'Guyana', value: 786.126},
							{name: 'Honduras', value: 7621.204},
							{name: 'Croatia', value: 4338.027},
							{name: 'Haiti', value: 9896.4},
							{name: 'Hungary', value: 10014.633},
							{name: 'Indonesia', value: 240676.485},
							{name: 'India', value: 1205624.648},
							{name: 'Ireland', value: 4467.561},
							{name: 'Iran', value: 240676.485},
							{name: 'Iraq', value: 30962.38},
							{name: 'Iceland', value: 318.042},
							{name: 'Israel', value: 7420.368},
							{name: 'Italy', value: 60508.978},
							{name: 'Jamaica', value: 2741.485},
							{name: 'Jordan', value: 6454.554},
							{name: 'Japan', value: 127352.833},
							{name: 'Kazakhstan', value: 15921.127},
							{name: 'Kenya', value: 40909.194},
							{name: 'Kyrgyzstan', value: 5334.223},
							{name: 'Cambodia', value: 14364.931},
							{name: 'South Korea', value: 51452.352},
							{name: 'Kosovo', value: 97.743},
							{name: 'Kuwait', value: 2991.58},
							{name: 'Laos', value: 6395.713},
							{name: 'Lebanon', value: 4341.092},
							{name: 'Liberia', value: 3957.99},
							{name: 'Libya', value: 6040.612},
							{name: 'Sri Lanka', value: 20758.779},
							{name: 'Lesotho', value: 2008.921},
							{name: 'Lithuania', value: 3068.457},
							{name: 'Luxembourg', value: 507.885},
							{name: 'Latvia', value: 2090.519},
							{name: 'Morocco', value: 31642.36},
							{name: 'Moldova', value: 103.619},
							{name: 'Madagascar', value: 21079.532},
							{name: 'Mexico', value: 117886.404},
							{name: 'Macedonia', value: 507.885},
							{name: 'Mali', value: 13985.961},
							{name: 'Myanmar', value: 51931.231},
							{name: 'Montenegro', value: 620.078},
							{name: 'Mongolia', value: 2712.738},
							{name: 'Mozambique', value: 23967.265},
							{name: 'Mauritania', value: 3609.42},
							{name: 'Malawi', value: 15013.694},
							{name: 'Malaysia', value: 28275.835},
							{name: 'Namibia', value: 2178.967},
							{name: 'New Caledonia', value: 246.379},
							{name: 'Niger', value: 15893.746},
							{name: 'Nigeria', value: 159707.78},
							{name: 'Nicaragua', value: 5822.209},
							{name: 'Netherlands', value: 16615.243},
							{name: 'Norway', value: 4891.251},
							{name: 'Nepal', value: 26846.016},
							{name: 'New Zealand', value: 4368.136},
							{name: 'Oman', value: 2802.768},
							{name: 'Pakistan', value: 173149.306},
							{name: 'Panama', value: 3678.128},
							{name: 'Peru', value: 29262.83},
							{name: 'Philippines', value: 93444.322},
							{name: 'Papua New Guinea', value: 6858.945},
							{name: 'Poland', value: 38198.754},
							{name: 'Puerto Rico', value: 3709.671},
							{name: 'North Korea', value: 1.468},
							{name: 'Portugal', value: 10589.792},
							{name: 'Paraguay', value: 6459.721},
							{name: 'Qatar', value: 1749.713},
							{name: 'Romania', value: 21861.476},
							{name: 'Russia', value: 21861.476},
							{name: 'Rwanda', value: 10836.732},
							{name: 'Western Sahara', value: 514.648},
							{name: 'Saudi Arabia', value: 27258.387},
							{name: 'Sudan', value: 35652.002},
							{name: 'South Sudan', value: 9940.929},
							{name: 'Senegal', value: 12950.564},
							{name: 'Solomon Islands', value: 526.447},
							{name: 'Sierra Leone', value: 5751.976},
							{name: 'El Salvador', value: 6218.195},
							{name: 'Somaliland', value: 9636.173},
							{name: 'Somalia', value: 9636.173},
							{name: 'Republic of Serbia', value: 3573.024},
							{name: 'Suriname', value: 524.96},
							{name: 'Slovakia', value: 5433.437},
							{name: 'Slovenia', value: 2054.232},
							{name: 'Sweden', value: 9382.297},
							{name: 'Swaziland', value: 1193.148},
							{name: 'Syria', value: 7830.534},
							{name: 'Chad', value: 11720.781},
							{name: 'Togo', value: 6306.014},
							{name: 'Thailand', value: 66402.316},
							{name: 'Tajikistan', value: 7627.326},
							{name: 'Turkmenistan', value: 5041.995},
							{name: 'East Timor', value: 10016.797},
							{name: 'Trinidad and Tobago', value: 1328.095},
							{name: 'Tunisia', value: 10631.83},
							{name: 'Turkey', value: 72137.546},
							{name: 'United Republic of Tanzania', value: 44973.33},
							{name: 'Uganda', value: 33987.213},
							{name: 'Ukraine', value: 46050.22},
							{name: 'Uruguay', value: 3371.982},
							{name: 'United States of America', value: 312247.116},
							{name: 'Uzbekistan', value: 27769.27},
							{name: 'Venezuela', value: 236.299},
							{name: 'Vietnam', value: 89047.397},
							{name: 'Vanuatu', value: 236.299},
							{name: 'West Bank', value: 13.565},
							{name: 'Yemen', value: 22763.008},
							{name: 'South Africa', value: 51452.352},
							{name: 'Zambia', value: 13216.985},
							{name: 'Zimbabwe', value: 13076.978}
						]
					}
				]
			};

			myChart.setOption(option);



			window.onresize = myChart.resize;
		}
	};
	return directive;
}
/**
 * 
 * 
 */
angular.module('MRT').directive('lineChart', lineChart);

function lineChart($parse) {
    var directive = {
        restrict: 'AE',
        // templateUrl: 'pension/tpls/term/term-search-pageview.html',
        replace: true,
        //our data source would be an array
        //passed thru chart-data attribute
       // scope: {data: '=chartData'},
        link: function(scope, element, attrs) {

            var chart;
            d3.json('../data/cumulativeLineData.json', function(data) {
                nv.addGraph(function() {
                    chart = nv.models.cumulativeLineChart()
                            .x(function(d) {
                        return d[0]
                    })
                            .y(function(d) {
                        return d[1] / 100
                    }) //adjusting, 100% is 1.00, not 100 as it is in the data
                            .color(d3.scale.category10().range())
                            .useInteractiveGuideline(true)
                            ;

                    chart.xAxis
                            .tickValues([1078030800000, 1122782400000, 1167541200000, 1251691200000])
                            .tickFormat(function(d) {
                        return d3.time.format('%x')(new Date(d))
                    });

                    chart.yAxis
                            .tickFormat(d3.format(',.1%'));

                    var svg = d3.select(element[0]).append('svg');
                    console.log(svg);
                            svg.datum(data)
                            .call(chart);

                    //TODO: Figure out a good way to do this automatically
                    nv.utils.windowResize(chart.update);

                    return chart;
                });
            });
        }
    };
    return directive;
}
;

/**
 * 
 * 
 */
angular.module('MRT').directive('mrtMapChart', mrtMapChart);

function mrtMapChart($parse) {
	var directive = {
		restrict: 'AE',
		// templateUrl: 'pension/tpls/term/term-search-pageview.html',
		replace: true,
		//our data source would be an array
		//passed thru chart-data attribute
		// scope: {data: '=chartData'},
		link: function(scope, element, attrs) {
// // instantiate the chart------------------
// script plain import
			var myChart = echarts.init(element[0]);

// loading---------------------
			myChart.showLoading({
				text: "We're building the buildings as fast as we can...please wait! ", //loading text
			});

// ajax getting data...............

// ajax callback
			myChart.hideLoading();

// use the chart-------------------
			option = {
				title: {
					text: 'World Population (2010)',
					subtext: 'from United Nations, Total population, both sexes combined, as of 1 July (thousands)',
					// sublink: 'http://esa.un.org/wpp/Excel-Data/population.htm',
					x: 'center',
					y: 'top'
				},
				tooltip: {
					trigger: 'item',
					formatter: function(params) {
						var value = (params.value + '').split('.');
						value = value[0].replace(/(\d{1,3})(?=(?:\d{3})+(?!\d))/g, '$1,')
								+ '.' + value[1];
						return params.seriesName + '<br/>' + params.name + ' : ' + value;
					}
				},
				toolbox: {
					show: true,
					orient: 'vertical',
					x: 'right',
					y: 'center',
					feature: {
						mark: {
							show: true,
							title: 'Mark',
						},
						dataView: {
							show: true,
							title: 'View Data',
							readOnly: true,
							lang: ['View Data', 'Close', 'Refresh']
						},
						restore: {
							show: true,
							title: 'Restore',
						},
						saveAsImage: {
							show: true,
							title: 'Save As Image',
							type: 'png',
							lang: ['Language']
						}
					}
				},
				dataRange: {
					min: 0,
					max: 1000000,
					text: ['High', 'Low'],
					realtime: false,
					calculable: true,
					color: ['#c0392b', '#f1c40f', '#3498db']
				},
				series: [
					{
						name: 'World Population (2010)',
						type: 'map',
						mapType: 'world',
						roam: true,
						mapLocation: {
							y: 60
						},
						itemStyle: {
							emphasis: {label: {show: true}}
						},
						data: [
							{name: 'Afghanistan', value: 28397.812},
							{name: 'Angola', value: 19549.124},
							{name: 'Albania', value: 3150.143},
							{name: 'United Arab Emirates', value: 8441.537},
							{name: 'Argentina', value: 40374.224},
							{name: 'Armenia', value: 2963.496},
							{name: 'French Southern and Antarctic Lands', value: 268.065},
							{name: 'Australia', value: 22404.488},
							{name: 'Austria', value: 8401.924},
							{name: 'Azerbaijan', value: 9094.718},
							{name: 'Burundi', value: 9232.753},
							{name: 'Belgium', value: 10941.288},
							{name: 'Benin', value: 9509.798},
							{name: 'Burkina Faso', value: 15540.284},
							{name: 'Bangladesh', value: 151125.475},
							{name: 'Bulgaria', value: 7389.175},
							{name: 'The Bahamas', value: 66402.316},
							{name: 'Bosnia and Herzegovina', value: 3845.929},
							{name: 'Belarus', value: 9491.07},
							{name: 'Belize', value: 308.595},
							{name: 'Bermuda', value: 64.951},
							{name: 'Bolivia', value: 716.939},
							{name: 'Brazil', value: 195210.154},
							{name: 'Brunei', value: 27.223},
							{name: 'Bhutan', value: 716.939},
							{name: 'Botswana', value: 1969.341},
							{name: 'Central African Republic', value: 4349.921},
							{name: 'Canada', value: 34126.24},
							{name: 'Switzerland', value: 7830.534},
							{name: 'Chile', value: 17150.76},
							{name: 'China', value: 1359821.465},
							{name: 'Ivory Coast', value: 60508.978},
							{name: 'Cameroon', value: 20624.343},
							{name: 'Democratic Republic of the Congo', value: 62191.161},
							{name: 'Republic of the Congo', value: 3573.024},
							{name: 'Colombia', value: 46444.798},
							{name: 'Costa Rica', value: 4669.685},
							{name: 'Cuba', value: 11281.768},
							{name: 'Northern Cyprus', value: 1.468},
							{name: 'Cyprus', value: 1103.685},
							{name: 'Czech Republic', value: 10553.701},
							{name: 'Germany', value: 83017.404},
							{name: 'Djibouti', value: 834.036},
							{name: 'Denmark', value: 5550.959},
							{name: 'Dominican Republic', value: 10016.797},
							{name: 'Algeria', value: 37062.82},
							{name: 'Ecuador', value: 15001.072},
							{name: 'Egypt', value: 78075.705},
							{name: 'Eritrea', value: 5741.159},
							{name: 'Spain', value: 46182.038},
							{name: 'Estonia', value: 1298.533},
							{name: 'Ethiopia', value: 87095.281},
							{name: 'Finland', value: 5367.693},
							{name: 'Fiji', value: 860.559},
							{name: 'Falkland Islands', value: 49.581},
							{name: 'France', value: 63230.866},
							{name: 'Gabon', value: 1556.222},
							{name: 'United Kingdom', value: 62066.35},
							{name: 'Georgia', value: 4388.674},
							{name: 'Ghana', value: 24262.901},
							{name: 'Guinea', value: 10876.033},
							{name: 'Gambia', value: 1680.64},
							{name: 'Guinea Bissau', value: 10876.033},
							{name: 'Equatorial Guinea', value: 696.167},
							{name: 'Greece', value: 11109.999},
							{name: 'Greenland', value: 56.546},
							{name: 'Guatemala', value: 14341.576},
							{name: 'French Guiana', value: 231.169},
							{name: 'Guyana', value: 786.126},
							{name: 'Honduras', value: 7621.204},
							{name: 'Croatia', value: 4338.027},
							{name: 'Haiti', value: 9896.4},
							{name: 'Hungary', value: 10014.633},
							{name: 'Indonesia', value: 240676.485},
							{name: 'India', value: 1205624.648},
							{name: 'Ireland', value: 4467.561},
							{name: 'Iran', value: 240676.485},
							{name: 'Iraq', value: 30962.38},
							{name: 'Iceland', value: 318.042},
							{name: 'Israel', value: 7420.368},
							{name: 'Italy', value: 60508.978},
							{name: 'Jamaica', value: 2741.485},
							{name: 'Jordan', value: 6454.554},
							{name: 'Japan', value: 127352.833},
							{name: 'Kazakhstan', value: 15921.127},
							{name: 'Kenya', value: 40909.194},
							{name: 'Kyrgyzstan', value: 5334.223},
							{name: 'Cambodia', value: 14364.931},
							{name: 'South Korea', value: 51452.352},
							{name: 'Kosovo', value: 97.743},
							{name: 'Kuwait', value: 2991.58},
							{name: 'Laos', value: 6395.713},
							{name: 'Lebanon', value: 4341.092},
							{name: 'Liberia', value: 3957.99},
							{name: 'Libya', value: 6040.612},
							{name: 'Sri Lanka', value: 20758.779},
							{name: 'Lesotho', value: 2008.921},
							{name: 'Lithuania', value: 3068.457},
							{name: 'Luxembourg', value: 507.885},
							{name: 'Latvia', value: 2090.519},
							{name: 'Morocco', value: 31642.36},
							{name: 'Moldova', value: 103.619},
							{name: 'Madagascar', value: 21079.532},
							{name: 'Mexico', value: 117886.404},
							{name: 'Macedonia', value: 507.885},
							{name: 'Mali', value: 13985.961},
							{name: 'Myanmar', value: 51931.231},
							{name: 'Montenegro', value: 620.078},
							{name: 'Mongolia', value: 2712.738},
							{name: 'Mozambique', value: 23967.265},
							{name: 'Mauritania', value: 3609.42},
							{name: 'Malawi', value: 15013.694},
							{name: 'Malaysia', value: 28275.835},
							{name: 'Namibia', value: 2178.967},
							{name: 'New Caledonia', value: 246.379},
							{name: 'Niger', value: 15893.746},
							{name: 'Nigeria', value: 159707.78},
							{name: 'Nicaragua', value: 5822.209},
							{name: 'Netherlands', value: 16615.243},
							{name: 'Norway', value: 4891.251},
							{name: 'Nepal', value: 26846.016},
							{name: 'New Zealand', value: 4368.136},
							{name: 'Oman', value: 2802.768},
							{name: 'Pakistan', value: 173149.306},
							{name: 'Panama', value: 3678.128},
							{name: 'Peru', value: 29262.83},
							{name: 'Philippines', value: 93444.322},
							{name: 'Papua New Guinea', value: 6858.945},
							{name: 'Poland', value: 38198.754},
							{name: 'Puerto Rico', value: 3709.671},
							{name: 'North Korea', value: 1.468},
							{name: 'Portugal', value: 10589.792},
							{name: 'Paraguay', value: 6459.721},
							{name: 'Qatar', value: 1749.713},
							{name: 'Romania', value: 21861.476},
							{name: 'Russia', value: 21861.476},
							{name: 'Rwanda', value: 10836.732},
							{name: 'Western Sahara', value: 514.648},
							{name: 'Saudi Arabia', value: 27258.387},
							{name: 'Sudan', value: 35652.002},
							{name: 'South Sudan', value: 9940.929},
							{name: 'Senegal', value: 12950.564},
							{name: 'Solomon Islands', value: 526.447},
							{name: 'Sierra Leone', value: 5751.976},
							{name: 'El Salvador', value: 6218.195},
							{name: 'Somaliland', value: 9636.173},
							{name: 'Somalia', value: 9636.173},
							{name: 'Republic of Serbia', value: 3573.024},
							{name: 'Suriname', value: 524.96},
							{name: 'Slovakia', value: 5433.437},
							{name: 'Slovenia', value: 2054.232},
							{name: 'Sweden', value: 9382.297},
							{name: 'Swaziland', value: 1193.148},
							{name: 'Syria', value: 7830.534},
							{name: 'Chad', value: 11720.781},
							{name: 'Togo', value: 6306.014},
							{name: 'Thailand', value: 66402.316},
							{name: 'Tajikistan', value: 7627.326},
							{name: 'Turkmenistan', value: 5041.995},
							{name: 'East Timor', value: 10016.797},
							{name: 'Trinidad and Tobago', value: 1328.095},
							{name: 'Tunisia', value: 10631.83},
							{name: 'Turkey', value: 72137.546},
							{name: 'United Republic of Tanzania', value: 44973.33},
							{name: 'Uganda', value: 33987.213},
							{name: 'Ukraine', value: 46050.22},
							{name: 'Uruguay', value: 3371.982},
							{name: 'United States of America', value: 312247.116},
							{name: 'Uzbekistan', value: 27769.27},
							{name: 'Venezuela', value: 236.299},
							{name: 'Vietnam', value: 89047.397},
							{name: 'Vanuatu', value: 236.299},
							{name: 'West Bank', value: 13.565},
							{name: 'Yemen', value: 22763.008},
							{name: 'South Africa', value: 51452.352},
							{name: 'Zambia', value: 13216.985},
							{name: 'Zimbabwe', value: 13076.978}
						],
					}
				]
			};

			myChart.setOption(option);



			window.onresize = myChart.resize;
		}
	};
	return directive;
}
/**
 * 
 * 
 */
angular.module('MRT').directive('pieChart', pieChart);

function pieChart($parse) {
	var directive = {
		restrict: 'AE',
		// templateUrl: 'pension/tpls/term/term-search-pageview.html',
		replace: true,
		//our data source would be an array
		//passed thru chart-data attribute
		// scope: {data: '=chartData'},
		link: function(scope, element, attrs) {

			var dataset = {
				apples: [
					{name: 'The Gambia', value: 53245},
					{name: 'Senegal', value: 28479},
					{name: 'Sierra Leone', value: 19697},
					{name: 'Nigeria', value: 24037},
					{name: 'Liberia', value: 40245}
				]
			};
			/**
			 var dataset = {
			 apples: [53245, 28479, 19697, 24037, 40245],
			 };
			 **/
			var width = 300,
					height = 300,
					radius = Math.min(width, height) / 2;

			var color = d3.scale.category20();
// console.log(color);
			var color2 = ['#3498db', '#2ecc71', '#2c3e50', '#8e44ad', '#f39c12', '#e74c3c'];
			var color2 = ['#00BFF3', '#EB5367', '#FFCE54', '#738F12', '#2A2F36']
			var hex = color2[0];
			
			var colorLighter= d3.scale.linear().domain([0,dataset.apples.length])
      .range([d3.rgb(hex), d3.rgb('#c9e9f5')]);
	  // d3.rgb(hex).brighter(1)
			var pie = d3.layout.pie()
					.value(function(d) {
						return d.value;
					})
					.sort(null);

			var piedata = pie(dataset.apples);

			var arc = d3.svg.arc()
					.innerRadius(radius - (width / 3))
					.outerRadius(radius - (width / 6));


			var svg = d3.select(element[0]).append('svg')
					.attr("width", width)
					.attr("height", height)
					.append("g")
					.attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");

			var path = svg.selectAll("path")
					.data(piedata)
					.enter().append("path")
					.attr("fill", function(d, i) {
						// return color2[i];
						return colorLighter(i);
					})
					.attr("d", arc);

			svg.selectAll("text").data(piedata)
					.enter()
					.append("text")
					.style("fill", "#7f8c8d")
					.attr("text-anchor", "middle")
					.attr("x", function(d) {
						// console.log(d);
						var a = d.startAngle + (d.endAngle - d.startAngle) / 2 - Math.PI / 2;
						d.cx = Math.cos(a) * (radius - 75);
						return d.x = Math.cos(a) * (radius - 20);
					})
					.attr("y", function(d) {
						var a = d.startAngle + (d.endAngle - d.startAngle) / 2 - Math.PI / 2;
						d.cy = Math.sin(a) * (radius - 75);
						return d.y = Math.sin(a) * (radius - 20);
					})
					.text(function(d) {
						return d.data.name;
					})
					.each(function(d) {
						var bbox = this.getBBox();
						d.sx = d.x - bbox.width / 2 - 2;
						d.ox = d.x + bbox.width / 2 + 2;
						d.sy = d.oy = d.y + 5;
					});

			svg.append("defs").append("marker")
					.attr("id", "circ")
					.attr("markerWidth", 6)
					.attr("markerHeight", 6)
					.attr("refX", 3)
					.attr("refY", 3)
					.style("fill", "#7f8c8d")
					.append("circle")
					.attr("cx", 3)
					.attr("cy", 3)
					.attr("r", 3);

			svg.selectAll("path.pointer").data(piedata).enter()
					.append("path")
					.attr("class", "pointer")
					.style("fill", "none")
					.style("stroke", "#7f8c8d")
					.attr("marker-end", "url(#circ)")
					.attr("d", function(d) {
						if (d.cx >= d.ox) {
							return "M" + d.sx + "," + d.sy + "L" + d.ox + "," + d.oy + " " + d.cx + "," + d.cy;
						} else {
							// console.log(d);
							return "M" + d.ox + "," + d.oy + "L" + d.sx + "," + d.sy + " " + d.cx + "," + d.cy;
						}
					});

			
		}
	};
	return directive;
}
;

/**
 * 
 * 
 */
angular.module('MRT').directive('worldMap', worldMap);

function worldMap($parse) {
    var directive = {
        restrict: 'AE',
        // templateUrl: 'pension/tpls/term/term-search-pageview.html',
        replace: true,
        //our data source would be an array
        //passed thru chart-data attribute
        scope: {data: '=chartData'},
        link: function(scope, element, attrs) {
            //in D3, any selection[0] contains the group
            //selection[0][0] is the DOM node
            //but we won't need that this time
            // var selector = element[0];
            var chart;
            //var color = d3.scale.linear().domain([0,1]).range(["#fed900","#39c"]);
            var color = ["#fed900", "#39c"];

            // console.log("log");
            // var $container = "container";
            var $element = element[0];
            var $topoUrl = "../data/world-topo-min.json";
            var $dataUrl = "../data/country-capitals.csv";

            d3.select(window).on("resize", throttle);

            var zoom = d3.behavior.zoom()
                    .scaleExtent([1, 9])
                    .on("zoom", move);


            var width = $element.offsetWidth;
            var height = width / 4;
// var height = width / 4;

            var topo, projection, path, svg, g;

            var graticule = d3.geo.graticule();

            var tooltip = d3.select($element).append("div").attr("class", "tooltip hidden");

            setup(width, height);

            function setup(width, height) {
                projection = d3.geo.mercator()
                        .translate([(width / 2), (height / 2)])
                        .scale(width / 2 / Math.PI);

                path = d3.geo.path().projection(projection);

                svg = d3.select($element).append("svg")
                        .attr("width", width)
                        .attr("height", height)
                        .call(zoom)
                        .on("click", click)
                        .append("g");

                g = svg.append("g");

            }

            d3.json($topoUrl, function(error, world) {

                var countries = topojson.feature(world, world.objects.countries).features;

                topo = countries;
                draw(topo);

            });


            function getColours(r, g, b) {
                var opc = 0.1;
                var colours = [];
                while (opc <= 1) {
                    colours.push("rgba(" + r + ", " + g + ", " + b + ", " + opc + ")");
                    opc += 0.1;
                }
                return colours;
            }

// var colours = getColours(41, 125, 185);
// var colours = getColours(52, 152, 219);
            var colours = getColours(243, 156, 18);
            var colours = getColours(243, 156, 18);


            var heatmapColour = d3.scale.linear()
                    .domain(d3.range(0, 1, 1.0 / (colours.length - 1)))
                    .range(colours);

            function draw(topo) {

                svg.append("path")
                        .datum(graticule)
                        .attr("class", "graticule")
                        .attr("d", path);


                g.append("path")
                        .datum({type: "LineString", coordinates: [[-180, 0], [-90, 0], [0, 0], [90, 0], [180, 0]]})
                        .attr("class", "equator")
                        .attr("d", path);


                var country = g.selectAll(".country").data(topo);

                country.enter().insert("path")
                        .attr("class", "country")
                        .attr("d", path)
                        .attr("id", function(d, i) {
                    return d.id;
                })
                        .attr("title", function(d, i) {
                    return d.properties.name;
                })
                        .attr("country", function(d, i) {
                    return d.properties.name.toUpperCase();
                })
                        .style("fill", function(d, i) {
                    return '#ccc';
                });

                //offsets for tooltips
                var offsetL = $element.offsetLeft + 20;
                var offsetT = $element.offsetTop + 10;

                //tooltips
                country
                        .on("mousemove", function(d, i) {

                    var mouse = d3.mouse(svg.node()).map(function(d) {
                        return parseInt(d);
                    });

                    tooltip.classed("hidden", false)
                            .attr("style", "left:" + (mouse[0] + offsetL) + "px;top:" + (mouse[1] + offsetT) + "px")
                            .html(d.properties.name);

                })
                        .on("mouseout", function(d, i) {
                    tooltip.classed("hidden", true);
                });



                //EXAMPLE: adding some capitals from external CSV file
                d3.csv($dataUrl, function(err, capitals) {

                    capitals.forEach(function(i) {
                        addpoint(i.CapitalLongitude, i.CapitalLatitude, i.CapitalName);
                        var percent = i.Percent;
                        var rgb = d3.rgb('#090');
                        //console.log(i.CountryName.toUpperCase());
                        d3.select("[country='" + i.CountryName.toUpperCase() + "']").style("fill", function(d) {
                            // console.log(rgb.toString());
                            return heatmapColour(percent);
                        });
                    });

                });

            }


            function redraw() {
                width = $element.offsetWidth;
                height = width / 2;
                d3.select('svg').remove();
                setup(width, height);
                draw(topo);
            }


            function move() {

                var t = d3.event.translate;
                var s = d3.event.scale;
                zscale = s;
                var h = height / 4;


                t[0] = Math.min(
                        (width / height) * (s - 1),
                        Math.max(width * (1 - s), t[0])
                        );

                t[1] = Math.min(
                        h * (s - 1) + h * s,
                        Math.max(height * (1 - s) - h * s, t[1])
                        );

                zoom.translate(t);
                g.attr("transform", "translate(" + t + ")scale(" + s + ")");

                //adjust the country hover stroke width based on zoom level
                d3.selectAll(".country").style("stroke-width", 1.5 / s);

            }



            var throttleTimer;
            function throttle() {
                window.clearTimeout(throttleTimer);
                throttleTimer = window.setTimeout(function() {
                    redraw();
                }, 200);
            }


//geo translation on mouse click in map
            function click() {
                var latlon = projection.invert(d3.mouse(this));
                console.log(latlon);
            }


//function to add points and text to the map (used in plotting capitals)
            function addpoint(lat, lon, text) {

                var gpoint = g.append("g").attr("class", "gpoint");
                var x = projection([lat, lon])[0];
                var y = projection([lat, lon])[1];

                gpoint.append("svg:circle")
                        .attr("cx", x)
                        .attr("cy", y)
                        .attr("class", "point")
                        .attr("r", 1.5);

                //conditional in case a point has no associated text
                if (text.length > 0) {

                    gpoint.append("text")
                            .attr("x", x + 2)
                            .attr("y", y + 2)
                            .attr("class", "text")
                            .text(text);
                }

            }

        }
    };
    return directive;
}
;

angular.module('MRT').controller('DashboardCtrl', ['$scope', '$filter', 'geoModelService', 'geoGroupService', function($scope, $filter, geoModelService, geoGroupService) {
		$scope.app.loggedIn = true;
}]);
angular.module('MRT').controller('GeographyCtrl', ['$scope', '$filter', 'ngTableParams', 'geographyService', function($scope, $filter, ngTableParams, geographyService) {

		$scope.data = {};
		$scope.data.geographies = [];
		$scope.data.tableData = [];


		geographyService.getGeographies($scope.data.params).success(function(data) {

			$scope.data.geographies = data.geographies;


		}).error(function(error) {
			$scope.status = 'Unable to load customer data: ' + error.message;

		});
		$scope.tableParams = new ngTableParams({
			page: 1, // show first page
			count: 10, // count per page
			filter: {
				name: ''       // initial filter
			}
		}, {
			total: $scope.data.geographies.length, // length of data
			getData: function($defer, params) {
				// use build-in angular filter
				var orderedData = params.filter() ?
						$filter('filter')($scope.data.geographies, params.filter()) :
						$scope.data.geographies;
				$scope.data.tableData = orderedData.slice((params.page() - 1) * params.count(), params.page() * params.count());
				params.total(orderedData.length); // set total for recalc pagination
				$defer.resolve($scope.data.tableData);
			}
		});
	}]);
angular.module('MRT')
		.factory('geographyService', ['$http', 'env', function($http, env) {


				var urlBase = env.apiUrl;
				var dataFactory = {
					geographies: {}
				};

				dataFactory.getGeographies = function(params) {
					return $http.get(urlBase + '/geography/', {
						params: params
					});
				};





				return dataFactory;
			}]);
angular.module('MRT').controller('GeoGroupCtrl', ['$scope', '$filter', 'geoGroupService', function($scope, $filter, geoGroupService) {

		$scope.data = {};
		$scope.search = '';
		$scope.data.geogroups = [];

		geoGroupService.list($scope.data.params).success(function(data) {

			$scope.data.geogroups = data.geogroups;

		}).error(function(error) {
			$scope.status = 'Unable to load customer data: ' + error.message;

		});


		$scope.selected = function(item) {
			geoGroupService.data.selected = item;
		};

	}]).controller('GeoGroupViewCtrl', ['$scope', '$filter', '$stateParams', 'geoGroupService', 'geographyService', function($scope, $filter, $stateParams, geoGroupService, geographyService) {
		$scope.data = {};
		$scope.data.geographies = [];
		$scope.data.geogroupgeographies = [];
		$scope.data.geogroup = {name: '', description: ''};
		$scope.data.params = {};
		$scope.data.params.id = $stateParams.id;

		
		geographyService.getGeographies($scope.data.params).success(function(data) {
			$scope.data.geographies = data.geographies;
			$scope.getGeographies();

		}).error(function(error) {
			$scope.status = 'Unable to load customer data: ' + error.message;

		});
		


		$scope.getGeographies = function() {
			geoGroupService.getGeographies($scope.data.params).success(function(data) {

				$scope.data.geogroupgeographies = data.geographies;
				$scope.data.geogroup = data.group;
				// console.log($scope.data.geographies);

				angular.forEach($scope.data.geogroupgeographies, function(geography, key) {
					$scope.select(geography.geography_id);

				});

			}).error(function(error) {
				$scope.status = 'Unable to load customer data: ' + error.message;

			});

			$scope.select = function(id) {
				
				var found = $filter('filter')($scope.data.geographies, {id: parseInt(id)}, true);
				
				if (found.length) {
					// console.log(found);
					found[0].selected = true;
				}
			};

			$scope.deselect = function(id) {

				var found = $filter('filter')($scope.data.geographies, {id: id}, true);

				if (found.length) {
					found[0].selected = false;
				}
			};
		}







	}]);
angular.module('MRT')
        .factory('geoGroupService', ['$http', 'env', function($http, env) {

        var urlBase = env.apiUrl;
        
        var dataFactory = {
			data : {
				geogroups: []
			} 
		};
		
		dataFactory.getGeoGroupsData = function() {
			return dataFactory.data.geogroups;
			
		};

        dataFactory.list = function(params) {
            return $http.get(urlBase + '/geogroup/', {
                params: params
            });
        };
		
		dataFactory.getGeographies = function(params) {
            return $http.get(urlBase + '/geogroup/geographies', {
                params: params
            });
        };



        return dataFactory;
    }]);
angular.module('MRT').controller('GeoindicatorCtrl', ['$scope', '$filter', 'ngTableParams', 'geoindicatorService', function($scope, $filter, ngTableParams, geoindicatorService) {

	$scope.data = {};
	$scope.data.geoindicators = [];
	$scope.data.response = [];
	var data = [];


		geoindicatorService.getGeoindicators().success(function(data) {

			$scope.data.response = data.geoindicators;
			
		}).error(function(error) {
			$scope.status = 'Unable to load customer data: ' + error.message;
		});
		
		
		$scope.tableParams = new ngTableParams({
			page: 1, // show first page
			count: 10, // count per page
			filter: {
				name: ''       // initial filter
			}
		}, { 
			total: data.geoindicators, // length of data
			getData: function($defer, params) {
				// use build-in angular filter
            var orderedData = params.filter() ?
                   $filter('filter')($scope.data.response, params.filter()) :
                   $scope.data.response;
            $scope.data.geoindicators = orderedData.slice((params.page() - 1) * params.count(), params.page() * params.count());
            params.total(orderedData.length); // set total for recalc pagination
            $defer.resolve($scope.data.geoindicators); 
			}
		});
	}]);
angular.module('MRT')
		.factory('geoindicatorService', ['$http', 'env', function($http, env) {


				var urlBase = env.apiUrl;
				var dataFactory = {};

				dataFactory.getGeoindicators = function(params) {
					return $http.get(urlBase + '/geoindicator/', {
						params: params
					});
				};


				return dataFactory;
			}]);
angular.module('MRT').controller('GeoModelCtrl', ['$scope', '$filter', 'geoModelService', 'geoGroupService', function($scope, $filter, geoModelService, geoGroupService) {
		$scope.data = {weight: 10};
		$scope.response = {};
		$scope.response.geogroups = {data: []};
		$scope.response.geoindicators = {list: []};
		$scope.data.values = {};
		$scope.data.maxGeoScore = 0;
		$scope.data.scoreMax = 100;
		$scope.data.indicators = [];
		$scope.data.clusters = [];
		$scope.data.clusterData = [];
		$scope.data.params = {id: 1, date: 2013};
		$scope.predicate = '-score';

		$scope.clusterio = new clusterio.KMeans();
		
		$scope.data.dates = [2013, 2012, 2011, 2010];

		$scope.data.params.date = $scope.data.dates[0];
		// Here we are referencing the same object, so Angular inits the select box correctly

		$scope.getIndicatorValues = function(model, item) {
			$scope.data.params.geogroup_id = item.id;
			$scope.getValues();
		};
		
		$scope.getClusterIndicatorValues = function(model, item) {
			$scope.data.params.geogroup_id = item.id;
			$scope.getValues();
		};
		
		$scope.setClusterData = function() {
			$scope.data.clusterData = [];
			angular.forEach($scope.data.values.geographies, function(geography, key) {
				var row = [];
				angular.forEach($scope.response.geoindicators.list, function(indicator, key) {
					var geographyIngicator = $scope.getGeographyIndicator(geography, indicator);
					if(typeof geographyIngicator.value !== "undefined") {
						row.push(geographyIngicator.value);
					} else {
						row.push(null);
					}
				});
				$scope.data.clusterData.push(row);
			});
			
			// $scope.cluster();
			// console.log($scope.data.clusterData);
		};

		$scope.cluster = function() {
			$scope.data.clusters = $scope.clusterio.cluster($scope.data.clusterData, 9);
			console.log($scope.data.clusters);
		};


		$scope.getValues = function() {
			geoModelService.getValues($scope.data.params).success(function(data) {

				$scope.data.values = data;
				$scope.setIndicators();
				$scope.setClusterData();
				

			}).error(function(error) {
				$scope.status = 'Unable to load customer data: ' + error.message;

			});
		};

		// get indicators
		geoModelService.getIndicators($scope.data.params).success(function(data) {

			$scope.response.geoindicators.list = data.indicators;
			$scope.setIndicators();


		}).error(function(error) {
			$scope.status = 'Unable to load customer data: ' + error.message;

		});

		geoGroupService.list().success(function(data) {
			$scope.response.geogroups.data = data.geogroups;


		}).error(function(error) {
			$scope.status = 'Unable to load groups data: ' + error.message;

		});

		$scope.setIndicators = function() {
			$scope.indicatorChanged();
			// $scope.data.indicators = $scope.data.values.indicators;
			angular.forEach($scope.response.geoindicators.list, function(indicator, key) {
				indicator.max = 0;
				indicator.maxScore = 0;
			});
		};
		$scope.indicatorChanged = function(indicator) {
			$scope.data.maxGeoScore = 0;
			if (typeof indicator !== "undefined") {
				indicator.max = 0;
				indicator.maxScore = 0;
			}
			// alert("hey");
		};



		$scope.getScore = function(geography) {
			var $return = 0;
			var per = $scope.response.geoindicators.list.length * this.data.values.settings.max_weight;
			angular.forEach($scope.response.geoindicators.list, function(indicator, key) {

				var found = $filter('filter')(geography.indicators, {geography_id: geography.id, geoindicator_id: indicator.id}, true);
				// console.log(indicator);
				if (found.length) {
					var weight = ((indicator.weight / per) * 100);
					// $return = indicator.weight;
					found[0].score = (($scope.data.scoreMax / found[0].value) * weight);

					if (found[0].score > indicator.maxScore) {
						indicator.max = found[0].value;
						indicator.maxScore = found[0].score;
					}
					$return += found[0].score;
				}
			});
			geography.score = $return;
			if (geography.score > $scope.data.maxGeoScore) {
				$scope.data.maxGeoScore = geography.score;
			}

			return $return;
		};

		$scope.getGeographyIndicator = function(geography, indicator) {
			var found = $filter('filter')(geography.indicators, {geography_id: geography.id, geoindicator_id: indicator.id}, true);
			// console.log(found);

			if (found.length) {
				return found[0];
			} else {
				return {};
			}
		}

	}]);
angular.module('MRT').directive('geoModelCluster', geoModelCluster);
function geoModelCluster() {
    var directive = {
        restrict: 'AE',
        replace: true,
        templateUrl: 'js/module/mrt/geomodel/templates/geomodel-cluster.html',
        link: function(scope, element, attrs) {
            // alert("hey");
        }
    };
    return directive;
};
angular.module('MRT').directive('GeoModelGeMatrix', GeoModelGeMatrix);
function GeoModelGeMatrix() {
    var directive = {
        restrict: 'AE',
        replace: true,
        templateUrl: 'js/module/mrt/geomodel/templates/geomodel-ge-matrix.html'
    };
    return directive;
}
;
angular.module('MRT').directive('geoModelMap', GeoModelMap);
function GeoModelMap() {
    var directive = {
        restrict: 'AE',
        replace: true,
        templateUrl: 'js/module/mrt/geomodel/templates/geomodel-map.html'
    };
    return directive;
}
;
angular.module('MRT').directive('geoModelTable', geoModelTable);
function geoModelTable() {
    var directive = {
        restrict: 'AE',
        replace: true,
        templateUrl: 'js/module/mrt/geomodel/templates/geomodel-table.html'
    };
    return directive;
}
;
angular.module('MRT').directive('geoModelWeight', geoModelWeight);
function geoModelWeight() {
    var directive = {
        restrict: 'AE',
        replace: true,
        templateUrl: 'js/module/mrt/geomodel/templates/geomodel-weight.html',
        link: function(scope, element, attrs) {
            // alert("hey");
        }
    };
    return directive;
}
;
angular.module('MRT')
        .factory('geoModelService', ['$http', 'env', function($http, env) {


        var urlBase = env.apiUrl;
        var dataFactory = {};

        dataFactory.getValues = function(params) {
            return $http.get(urlBase + '/geomodel/values', {
                params: params
            });
        };

        dataFactory.getIndicators = function(params) {
            return $http.get(urlBase + '/geomodel/indicators', {
                params: params
            });
        };

        dataFactory.getFundSectors = function(fund) {
            return $http.get(urlBase + '/fund/sectors', {
                params: {fund: fund}
            });
        };

        dataFactory.getFundCountries = function(fund) {
            return $http.get(urlBase + '/fund/countries', {
                params: {fund: fund}
            });
        };

        dataFactory.getFunds = function() {
            return $http.get(urlBase + '/fund/funds');
        };



        dataFactory.listCountries = function() {
            return $http.get(urlBase);
        };

        dataFactory.listSectors = function() {
            return $http.get(urlBase);
        };

        dataFactory.listFundTypes = function() {
            return $http.get(urlBase);
        };

        dataFactory.listFundcategories = function() {
            return $http.get(urlBase);
        };


        return dataFactory;
    }]);
/**
* Loading Directive
* @see http://tobiasahlin.com/spinkit/
*/
angular
.module('MRT')
.directive('rdLoading', rdLoading);
function rdLoading() {
var directive = {
restrict: 'AE',
template: '<div class="loading"><div class="double-bounce1"></div><div class="double-bounce2"></div></div>'
};
return directive;
};
/**
 * Widget Body Directive
 */
angular
		.module('MRT')
		.directive('rdWidgetBody', rdWidgetBody);
function rdWidgetBody() {
	var directive = {
		requires: '^rdWidget',
		scope: {
			loading: '@?',
			classes: '@?'
		},
		transclude: true,
		template: '<div class="widget-body" ng-class="classes"><rd-loading ng-show="loading"></rd-loading><div ng-hide="loading" class="widget-content" ng-transclude></div></div>',
		restrict: 'E'
	};
	return directive;
}
;
/**
* Widget Footer Directive
*/
angular
.module('MRT')
.directive('rdWidgetFooter', rdWidgetFooter);
function rdWidgetFooter() {
var directive = {
requires: '^rdWidget',
transclude: true,
template: '<div class="widget-footer" ng-transclude></div>',
restrict: 'E'
};
return directive;
};
/**
 * Widget Header Directive
 */

angular
    .module('MRT')
    .directive('rdWidgetHeader', rdWidgetTitle);

function rdWidgetTitle() {
    var directive = {
        requires: '^rdWidget',
        scope: {
            title: '@',
            icon: '@'
        },
        transclude: true,
        template: '<div class="widget-header"><i class="fa" ng-class="icon"></i> {{title}} <div class="pull-right" ng-transclude></div></div>',
        restrict: 'E'
    };
    return directive;
};
/**
 * Widget Directive
 */

angular
    .module('MRT')
    .directive('rdWidget', rdWidget);

function rdWidget() {
    var directive = {
        transclude: true,
        template: '<div class="widget" ng-transclude></div>',
        restrict: 'EA'
    };
    return directive;

    function link(scope, element, attrs) {
        /* */
    }
};